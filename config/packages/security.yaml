security:
    providers:
        null_provider: { id: App\Security\NullUserProvider }
        user_provider:
            entity:
                class: 'App\Entity\User'
                property: 'email'

    encoders:
        App\Entity\User: auto

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login/user
            stateless: true
            provider: user_provider
            json_login:
                check_path: /api/login/user
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            provider: user_provider
            guard:
                authenticators:
                    - App\Security\TokenAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/doc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/refresh/user, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/refresh-token$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login/user, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/user$, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ POST ] }
        - { path: ^/api/,       roles: ROLE_USER }

